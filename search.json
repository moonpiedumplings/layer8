[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Layer 8",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "injects/automation/index.html",
    "href": "injects/automation/index.html",
    "title": "Automated Upgrades Inject",
    "section": "",
    "text": "Linux Team\nInject 3 — Automation\nObjective: Create a script or other system that automates updates, ran every 24 hours\nI have created a systemd timer and unit file that run every 24 hours, designed for a variety of linux distros with different package managers.\nWhen these files are placed in their respective locations, the system will run the update commands of various pacakge managers. Distros unsupported by a package manager will simply fail to run for that package manager.\n\n\n/etc/systemd/system/autoupdate.service\n\n[Unit]\nDescription=autoupdate service\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=/bin/bash -c \"bash -c 'dnf update -y && dnf upgrade -y' || bash -c 'DEBIAN_FRONTEND=noninteractive apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y' || bash -c 'pacman -Syu --noconfirm'\"\nRestart=never\n\n[Install]\nWantedBy=multi-user.target\n\n\n\n/etc/systemd/system/autoupdate.timer\n\n[Unit]\nDescription=autoupgrade timer.\n\n[Timer]\nOnCalendar=daily\nPersistent=true\n\n[Install]\nWantedBy=timers.target"
  },
  {
    "objectID": "injects/index.html",
    "href": "injects/index.html",
    "title": "Injects",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nAug 26, 2023\n\n\nAutomated Upgrades Inject\n\n\nJeffrey Fonseca\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nSep 12, 2023\n\n\nSetting up ssh for linux machines in the lab\n\n\nJeffrey Fonseca\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/ssh/index.html",
    "href": "projects/ssh/index.html",
    "title": "Setting up ssh for linux machines in the lab",
    "section": "",
    "text": "DNS\nFor whatever reason, the Linux desktop machines in the lab have neither a static ip nor hostnames set up.\nI asked about static ip’s and there apparently there was some issue with vlan interaction, and local hostanme resolution takes a longer time to set up.\nHowever, I found something funny, where you can actually just make a public domain name point to a private ip, and it will just work.\nSo I decided to use duckdns, for dynamic dns (if you don’t have a static ip), as an alternative to hostnames.\nHere is a systemd service I wrote that does this:\n\n\n/etc/systemd/system/duckdns.service\n\n[Unit]\nDescription=My Network Service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/bin/python3 -c \"import subprocess; local_ip = subprocess.check_output('ip route get 8.8.8.8', shell=True).decode('utf-8'); private_ip = local_ip.split(); print(private_ip[6]); subprocess.run(f'echo url=\\'https://www.duckdns.org/update?domains=domainname&token=duckdnstoken&ip={private_ip[6]}\\' | curl -k -K -', shell=True)\"\n\n[Install]\nWantedBy=multi-user.target\n\nThis is the hackiest one liner you have ever seen, but it works. I originally tried all bash, but I couldn’t fit it in a systemd one liner so I ended up with this.\nFor convience purposes, I have posted this online, so I can simply copy and paste stuff from this post.\nHere is the encrypted token:\ng6mYJ1tm32p33JZxOIMvj5QcpQAFELSm+QmKe3qDkWsehk4WN17/TLUx+aDrwFV7JqC05qIDn0E6f9+udPVcMSxvj827\nThis will make it very convinient to transfer configurations around, since everything is on a single web page.\nI created an ssh key. Here is the public key:\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/IkkryYkpOb1CTWP7UdD0o+26/E/MlQ7a23ls6F2TVL5eiltbDylm73DrmRkz0ETgUvHCs4yq2fHxSDvwPQwSGbipzsF4HEqQPWkMyZZu23fLgBiKENI/ApJXw97Xvp7zi7RGy7hATTp2TIusZJ8ChyE09ZVMUhnO0NrifIMblmZidVKVPBGCj8SxP5He0oEzthdoNbXZ49ql+fSLlqlwoFte7z8NlEfrL68MijKKftVmZMP9LL5ji1GyZTXuwaMOhR423MkVN+DWD78IWp05Gfn/AZrVUf+15jq3So6NxcQl1e0U9nUsVezgMB9VS+3Na5fa3Og8t+ey/BE76hjFR6+6R94t+DHuXooQk8zr4x132FcflA2gxz5UtHV7vZRb9GBSbf7hXDbj7U66MahIRV70iOLSO/k168NvVA7MarnYvYnT8Yc2U6vynqqqg59lZlzKZRypClliaX4/rHdhu9obQHCFsvktjiBbV8aCxP4ACHIDu0hkfbtRGbM5Y3k= moonpie@lizard\nAnd here is the private key, encrypted of course.\n\n\nShow\n\nLd3MpcgyO14c2wQSA3KBnbX1JgM8UnniCdlJIQaeXVvfpQGFf/5tnjIgVq6OaBef60WXQIE2MZyTedUsrfc+WfnwyRSVO+SbpGKskEK5mGnw89AaepBxcYJsLWiUFQr36NxZfLKoEgd07JI14JrCZokyiQxaMoTbMrp2no6b4tuRcbNNFTqUFAZly0MpPeprBNNU9WspMsa69gDQcvS0rYymLU3umhjOnJQx5ocsBSnrM9Ly0COfKejxKQZgBD9k8bQ4aIfO5k2hL+y9LCf+Zek78HAfovbMrSXGXnV9uxbzK4ZmR05092cKBWwLwpRnNTg+LCkS9glJFYy0gNYwWYMfFc0Fbz2EtDj4JFMJlp8dxv35qq8LRrJNeyxehi+wSroGsBkUF+iUSu8feu9BiqEMzMrudcGybHmbBSxmPmi+SYJcm914RdmltU81ZSFBYXH1zZlKgJ44wDzINCTcvE5NdsIKHrZ+ej0SLCsPTmKAFRkF2reZA4y0Mj5qJ/Fo3u2JV0zFbd52NdZxBXCgSxHgTEIp9dMlskeis8RPa4XeSlXWLntDpJOiGSlM+uPe4F7+96YwVbsNNmeA3MFO94KiTSqKy5NHcWIkAxFFHmiovtHG7nigzy1tKvIeExtsoxLl3v3f1U3z1FIzQyj5D+A6cA5gPSm2ulC1jvKeRe0i5cbBT4jG+0kXdIJn1z1b4rwxPVz93jtuh+ufSmrbREHPJqmpiSGGgLGzzKOg7QIowrgust93v/h6DoVbdP8vjGpXwbMP8xkYf4dsF7RakEur42OGwx+1HjTQP1trGPPvashOr6/2HJmUyFKy4MJhIQk5gu7hZ08wGqUINFIikUsyxtN80xc6nxhaoQNMp5Q7va57ALSQ0/kBoEeKoXFA2WPP025wz489Hhnn96a7wzhE6dHqdH5QEDFtkH9qgHMsGYx/3li+IEcBasU35yx1/D8uwX9ftvoRWskKCcn70puVGnVEN0evX2nahKDKuhkaLtM3FjABxj/t6d/LUiWHYG76wG1eCmeoOiLO4uAWc3Q7fxyb1zvqbw+78jJgWOOHNqtOrZxe2icvwK55fMyufd8cYR8KMVc8kg+G1iVhxJZbXXRHMPqvDtCXr9ktfQF2wfJ4QI4dQQ74ulRUdRGU7WU1QknKuoEs+OfRrNztqKrqJrqs2wrpl79oJ/ZhOULcXCIkM6T/0M998puzE7UN1uL2f6ldLXXVFgxeCYbglnRkepmSSpZt6Pgwm6eMNldV6m4WcFqDbnaE6idBxdSo5E+W51jILXAKPApRnw64esq2qSMfqviLc8JBQwDXWPFRwG+EmB1fTLcvsZA46mT33fUARAprKKXj6XUSPx1OivvKdwJZSPDc14SHcX2tG6IG1ai81UCi6HAWIaf3l5qgwmcYDzZa+Vg7wSB12EvzwI/YuzxwadvSSKDivW82J1hkJZ43afZ2gM+Q1dwGbESNc2VYkF+GDaoaz0LEAGONCPY1tzZKDkAtyXb65xnLmvLyDtalSDSG3iy5aWXKAgmv3cI40SgDpMNg9lHBz+MnA6qinO70Y2ZHPkLYetc33Chpybyb8s/uhvaRK93UXeaE6Hrb8Jf26d2GGilDVkxqM1erwjnCRPGhyGGoNLjS95avXypv9Jwf9J7mEiu0ubPUynhI9uPE3CSLjUuTTmCJs8KeJAsj1qSzCOgANI3ckik8MaawazTNZhHVc8hSF41V/N8EEVZQmTG4WBl4YrjVt61tCOJHwxoAGHcy9HbEipokig32E9Cw8V4X+yBAT73sPXcn8IrVz70U0hd/jYelI11DwR9ZdcCy8Z0YAMipJUI+YwA7Rx0YC0yIlNVQiIesSkiSTwvK3PSWy7XE5EGQ3g8gKz5MNB3OdOyAPFvN4+IHE2mn16gIFjiFj7SRCnKLhS+NlIct+Q9vleNCdmAkwIIJpEaSMs9a7+Aay2Y3vAxuF+mNKxf5cqToLMrm4cNr4vQkx9fe0/Z1lg3NnVwCDq7kaZOXOPGu4/D2u4clbTyQld6xGB70jR1a16BPkgR69wmg7o0KggtjDZUO8e8jYnCuJvtVLoUda7c8TNcxRKsuMdxMqi9IBhl8MaX4ZFfyZiEM6qESpMkdD8tOaUq7BaqAjhxItfwuTjkAOn8X6VWT1l9tiJ0Ly5PNEjSOYTt5/nfOE/k5TOBhfo0nY9lPiJZIAem+hxvvECkJ3HZvl8dYCOwvVO7R1Xq/oI40d4c4sYyoxzaq6FDdpD3ji+isbjv5pCrRhe/TEF50uCituwqnmMwfppOE7n/gEbDOKS/8D0XwQVY3i4X9dKHre3ItO0zJB66/i9bb126R1XBSWYSaYl9TcT9R1s8mzzosWokiFfAs1j5XMtENBMtC6Icl1+/fo7PEq6GweQfKc+P0GCtyPTDLbB35SmSCD5V1P9Q+aEjGVLR6RWABdYUgIOrRvwm16DMHqDSGBLO6FWSMrCIXpLQfy6rR0K4+pprZGhbHriUBVf8KfYXmNIYGmNCGxGtcOcj1ICEzobJWz+giphJn2E7K52ja94e+ftTPZhT7emtZ0JIXl2/+NVIjfcxC+ghBAPV7w/u7Ih308iFoTT/2iyWoCLpgVfrh4In8B31Zk6o6MbnjXwYqvTNf9UYt28APYkMTdmjvu4LKtBDAX8bwLp3dUXlyP4AvWTsVdhNfagMNBkqRCXhEiRokgkOJrS77PwoWl3MDZ/IamVhxMv3m5yfl752gyJ3UcGoAG8vU5KM9vW2MscndkXffDGxuLKI6amYwieK36D7XlO+sGyeBcbokw7tHIM4V0Fbhg6ISPLwDRG6eSV4YDpHVRrO3dfXiMT1hmceBCDs3aSa0qsREf2aW0lraa5+bEYmQOC5EZIIPhyN6RazsuUQ5h9yuNTXv0nMzh6QtAvDG8bJUcNNrxn0R+eVmMQJQ+07QrnvGAuHNuPeNgGNO5AcVSQl/cjtlsbncmhHfS5aerShm3E4oXRVBKDOB+Ajtwm1r/govSHlYwxzX2qliVuv18tHpTryTN7MZxVkRoWU4+2X2SNNUzueybNWz/nG551lhRn+enUZvtwNRwjd1hhnzjpDcTNV2JeHbjvO37zCivUxJVlxdV62NzVVZN3N/hKQELDS87GF2BRme1wUk++91h+IXSWIXE21hdHRpch2h4NFepk7jUk1wiMe05OOIjmRtUasoAtyeFGFiiz032jNMOMEDgzL/phRxT0XM/diXNw4QaUxw4n/urB6C3QVKA2yDYeePx9nscL6QrsEHHXE+9xx2FsKVQHBSH9JFpGQ0SMIY4E91pYnrml2ZGp2TCbr1GNMM1fhrs2wnyzj+2ylDae+mCJImQKxu7XYaQkhIJQMVqisOmGkJ8gM+sq9bwbL+4UWFtrJA8WBAOU1nMp5pzyAObKaIr1bQpYMIxPmPrXFvy45+vYd860f0LJic52dH7kTgcN+3FNOJvsP0Jd3u78SfLmvoJdNGByd61lYkBntFNfOKO+Olg/gIbmw=\n\nBelow is a little crypto tool which requires a specific password to decrypt this token.\n\n\n\n    \n    \n    Client-side AES-256 Encryption/Decryption\n       \n\n\n    \n    \n    Enter text to encrypt/decrypt:\n    \n    \n    \n    \n    Enter encryption/decryption password:\n    \n    \n    \n    \n    Encrypt\n    Decrypt"
  },
  {
    "objectID": "tools/crypt.html",
    "href": "tools/crypt.html",
    "title": "",
    "section": "",
    "text": "Client-side AES-256 Encryption/Decryption\n       \n\n\n    \n    \n    Enter text to encrypt/decrypt:\n    \n    \n    \n    \n    Enter encryption/decryption password:\n    \n    \n    \n    \n    Encrypt\n    Decrypt"
  }
]