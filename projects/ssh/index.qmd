---
title: "Setting up ssh for linux machines in the lab"
date: "2023-9-12"
categories: [linux, cybersecurity]
author: "Jeffrey Fonseca"

format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-block-background: true
  # docx: 
  #   title: "Inject 3 â€” Automation"
  #   date: "2023-8-26"
  #   author: "Jefrey Fonseca, Linux Team"
execute:
  freeze: true
---


# DNS

For whatever reason, the Linux desktop machines in the lab have neither a static ip nor hostnames set up.

I asked about static ip's and there apparently there was some issue with vlan interaction, and local hostanme resolution takes a longer time to set up.

However, I found something funny, where you can actually just make a public domain name point to a private ip, and it will just work. 

So I decided to use duckdns, for dynamic dns (if you don't have a static ip), as an alternative to hostnames. 

Here is a systemd service I wrote that does this:

```{.ini filename="/etc/systemd/system/duckdns.service" .code-overflow-wrap}
[Unit]
Description=My Network Service
Wants=network-online.target
After=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/python3 -c "import subprocess; local_ip = subprocess.check_output('ip route get 8.8.8.8', shell=True).decode('utf-8'); private_ip = local_ip.split(); print(private_ip[6]); subprocess.run(f'echo url=\'https://www.duckdns.org/update?domains=domainname&token=duckdnstoken&ip={private_ip[6]}\' | curl -k -K -', shell=True)"

[Install]
WantedBy=multi-user.target
```

This is the hackiest one liner you have ever seen, but it works. I originally tried all bash, but I couldn't fit it in a systemd one liner so I ended up with this.

For convience purposes, I have posted this online, so I can simply copy and paste stuff from this post. 

Here is the encrypted token: 

```{.default}
encrypted token here. 
```



{{< include ../../tools/crypt.qmd >}}

