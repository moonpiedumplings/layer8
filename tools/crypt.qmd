```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client-side AES-256 Encryption/Decryption</title>
       <style>
        h1 {
            color: #333; /* Dark text color */
        }

        textarea,
        input[type="password"] {
            background-color: #fff; /* White background for input elements */
            color: #777; /* Light text color */
            border: 1px solid #ccc; /* Light border color */
            padding: 5px;
        }

        button {
            background-color: #007bff; /* Blue button background color */
            color: #fff; /* White button text color */
            border: none;
            padding: 5px 10px;
            cursor: pointer;333
        }
    </style>
</head>
<body>
    <h1></h1>
    
    <label for="inputText">Enter text to encrypt/decrypt:</label>
    <textarea id="inputText" rows="4" cols="50"></textarea>
    <br>
    
    <label for="password">Enter encryption/decryption password:</label>
    <input type="password" id="password">
    <br>
    
    <button onclick="encryptText()">Encrypt</button>
    <button onclick="decryptText()">Decrypt</button>
    
    <p id="outputText"></p>

    <script>
        async function encryptText() {
            const inputText = document.getElementById('inputText').value;
            const password = document.getElementById('password').value;

            const encoder = new TextEncoder();
            const data = encoder.encode(inputText);
            const passwordBuffer = encoder.encode(password);

            const key = await crypto.subtle.importKey(
                'raw',
                passwordBuffer,
                'PBKDF2',
                false,
                ['deriveKey']
            );

            const derivedKey = await crypto.subtle.deriveKey(
                {
                    name: 'PBKDF2',
                    salt: new Uint8Array(16),
                    iterations: 100000,
                    hash: 'SHA-256',
                },
                key,
                { name: 'AES-CBC', length: 256 },
                true,
                ['encrypt', 'decrypt']
            );

            const iv = crypto.getRandomValues(new Uint8Array(16));
            const encryptedData = await crypto.subtle.encrypt(
                { name: 'AES-CBC', iv: iv },
                derivedKey,
                data
            );

            // Combine IV and encrypted data
            const encryptedBytes = new Uint8Array(iv.length + encryptedData.byteLength);
            encryptedBytes.set(iv, 0);
            encryptedBytes.set(new Uint8Array(encryptedData), iv.length);

            const encryptedText = btoa(String.fromCharCode(...encryptedBytes));

            document.getElementById('outputText').textContent =
                'Encrypted Text: ' + encryptedText;
        }

        async function decryptText() {
            const encryptedText = document.getElementById('inputText').value;
            const password = document.getElementById('password').value;

            const encryptedBytes = new Uint8Array(
                atob(encryptedText)
                    .split('')
                    .map((c) => c.charCodeAt(0))
            );

            const passwordBuffer = new TextEncoder().encode(password);

            const key = await crypto.subtle.importKey(
                'raw',
                passwordBuffer,
                'PBKDF2',
                false,
                ['deriveKey']
            );

            const iv = encryptedBytes.slice(0, 16);
            const data = encryptedBytes.slice(16);

            try {
                const derivedKey = await crypto.subtle.deriveKey(
                    {
                        name: 'PBKDF2',
                        salt: new Uint8Array(16),
                        iterations: 100000,
                        hash: 'SHA-256',
                    },
                    key,
                    { name: 'AES-CBC', length: 256 },
                    true,
                    ['encrypt', 'decrypt']
                );

                const decryptedData = await crypto.subtle.decrypt(
                    { name: 'AES-CBC', iv: iv },
                    derivedKey,
                    data
                );

                const decryptedText = new TextDecoder().decode(decryptedData);

                document.getElementById('outputText').textContent =
                    'Decrypted Text: ' + decryptedText;
            } catch (error) {
                document.getElementById('outputText').textContent =
                    'Decryption failed. Please check the password and input.';
            }
        }
    </script>
</body>
</html>
```